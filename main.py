# Реализация пузырьковой сортировки
def bubble_sort(arr):
    n = len(arr) # Определяем длину массива
    for run in range(n - 1): # Внешний цикл для количества проходов
        for i in range(n - 1 - run): # Внутренний цикл для сравнения соседних элементов
            if arr[i] > arr[i + 1]: # Если текущий элемент больше следующего, меняем их местами
                arr[i], arr[i + 1] = arr[i + 1], arr[i]

# Пример использования пузырьковой сортировки
arr = [5, 7, 4, 3, 8, 2]
bubble_sort(arr)
print(arr) # Вывод отсортированного массива: [2, 3, 4, 5, 7, 8]

# Реализация быстрой сортировки
def quick_sort(s):
    if len(s) <= 1: # Базовый случай: если длина массива меньше или равна 1, возвращаем его
        return s
    element = s[0] # Опорный элемент
    left = list(filter(lambda i: i < element, s)) # Меньше опорного элемента
    center = [i for i in s if i == element] # Равные опорному элементу
    right = list(filter(lambda i: i > element, s)) # Больше опорного элемента
    return quick_sort(left) + center + quick_sort(right) # Рекурсивно сортируем левую и правую части

# Пример использования быстрой сортировки
arr = [5, 2, 9, 0, 1, 5, 3]
print(quick_sort(arr)) # Вывод отсортированного массива: [0, 1, 2, 3, 5, 5, 9]

# Реализация сортировки выбором
def selection_sort(arr):
    for i in range(len(arr)): # Проходим по всем элементам массива
        min_index = i # Предполагаем, что текущий элемент минимальный
        for j in range(i + 1, len(arr)): # Ищем минимальный элемент в оставшейся части массива
            if arr[j] < arr[min_index]:
                min_index = j
        arr[i], arr[min_index] = arr[min_index], arr[i] # Меняем местами текущий и минимальный элементы

# Пример использования сортировки выбором
arr = [-3, 5, 0, -8, 1, 10]
selection_sort(arr)
print(arr) # Вывод отсортированного массива: [-8, -3, 0, 1, 5, 10]

# Реализация сортировки вставками
def insert_sort(arr):
    for i in range(1, len(arr)): # Начинаем с первого элемента
        key = arr[i] # Текущий элемент
        j = i - 1 # Предыдущий индекс
        while j >= 0 and arr[j] > key: # Сдвигаем элементы, если они больше текущего
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key # Вставляем текущий элемент на правильное место

# Пример использования сортировки вставками
arr = [-3, 5, 0, -8, 1, 10]
insert_sort(arr)
print(arr) # Вывод отсортированного массива: [-8, -3, 0, 1, 5, 10]
